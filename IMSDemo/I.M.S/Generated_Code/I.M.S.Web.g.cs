//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace I.M.S
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace I.M.S.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// The 'Employee' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/I.M.S.Web")]
    public sealed partial class Employee : Entity
    {
        
        private int _employeeID;
        
        private string _employeeName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEmployeeIDChanging(int value);
        partial void OnEmployeeIDChanged();
        partial void OnEmployeeNameChanging(string value);
        partial void OnEmployeeNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee"/> class.
        /// </summary>
        public Employee()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                if ((this._employeeID != value))
                {
                    this.OnEmployeeIDChanging(value);
                    this.ValidateProperty("EmployeeID", value);
                    this._employeeID = value;
                    this.RaisePropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string EmployeeName
        {
            get
            {
                return this._employeeName;
            }
            set
            {
                if ((this._employeeName != value))
                {
                    this.OnEmployeeNameChanging(value);
                    this.RaiseDataMemberChanging("EmployeeName");
                    this.ValidateProperty("EmployeeName", value);
                    this._employeeName = value;
                    this.RaiseDataMemberChanged("EmployeeName");
                    this.OnEmployeeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._employeeID;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'IMSDomainService' DomainService.
    /// </summary>
    public sealed partial class IMSDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="IMSDomainContext"/> class.
        /// </summary>
        public IMSDomainContext() : 
                this(new WebDomainClient<IIMSDomainServiceContract>(new Uri("I-M-S-Web-IMSDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="IMSDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The IMSDomainService service URI.</param>
        public IMSDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IIMSDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="IMSDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public IMSDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Employee"/> entity instances that have been loaded into this <see cref="IMSDomainContext"/> instance.
        /// </summary>
        public EntitySet<Employee> Employees
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Employee>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ItemDetail"/> entity instances that have been loaded into this <see cref="IMSDomainContext"/> instance.
        /// </summary>
        public EntitySet<ItemDetail> ItemDetails
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ItemDetail>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Location"/> entity instances that have been loaded into this <see cref="IMSDomainContext"/> instance.
        /// </summary>
        public EntitySet<Location> Locations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Location>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entity instances using the 'GetEmployees' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entity instances.</returns>
        public EntityQuery<Employee> GetEmployeesQuery()
        {
            this.ValidateMethod("GetEmployeesQuery", null);
            return base.CreateQuery<Employee>("GetEmployees", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ItemDetail"/> entity instances using the 'GetItemDetails' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ItemDetail"/> entity instances.</returns>
        public EntityQuery<ItemDetail> GetItemDetailsQuery()
        {
            this.ValidateMethod("GetItemDetailsQuery", null);
            return base.CreateQuery<ItemDetail>("GetItemDetails", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Location"/> entity instances using the 'GetLocations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Location"/> entity instances.</returns>
        public EntityQuery<Location> GetLocationsQuery()
        {
            this.ValidateMethod("GetLocationsQuery", null);
            return base.CreateQuery<Location>("GetLocations", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new IMSDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'IMSDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IIMSDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployees' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IMSDomainService/GetEmployeesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IMSDomainService/GetEmployees", ReplyAction="http://tempuri.org/IMSDomainService/GetEmployeesResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployees(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployees'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployees'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployees' operation.</returns>
            QueryResult<Employee> EndGetEmployees(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetItemDetails' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IMSDomainService/GetItemDetailsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IMSDomainService/GetItemDetails", ReplyAction="http://tempuri.org/IMSDomainService/GetItemDetailsResponse")]
            [WebGet()]
            IAsyncResult BeginGetItemDetails(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetItemDetails'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetItemDetails'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetItemDetails' operation.</returns>
            QueryResult<ItemDetail> EndGetItemDetails(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLocations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IMSDomainService/GetLocationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IMSDomainService/GetLocations", ReplyAction="http://tempuri.org/IMSDomainService/GetLocationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetLocations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLocations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLocations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLocations' operation.</returns>
            QueryResult<Location> EndGetLocations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IMSDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IMSDomainService/SubmitChanges", ReplyAction="http://tempuri.org/IMSDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class IMSDomainContextEntityContainer : EntityContainer
        {
            
            public IMSDomainContextEntityContainer()
            {
                this.CreateEntitySet<Employee>(EntitySetOperations.None);
                this.CreateEntitySet<ItemDetail>(EntitySetOperations.Edit);
                this.CreateEntitySet<Location>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'ItemDetail' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/I.M.S.Web")]
    public sealed partial class ItemDetail : Entity
    {
        
        private Nullable<int> _employeeID;
        
        private Nullable<int> _fullSize;
        
        private int _id;
        
        private string _itemBarcode;
        
        private Nullable<int> _itemID;
        
        private Nullable<int> _itemImage;
        
        private string _itemName;
        
        private Nullable<int> _locationID;
        
        private Nullable<int> _qty;
        
        private Nullable<DateTime> _scanDate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEmployeeIDChanging(Nullable<int> value);
        partial void OnEmployeeIDChanged();
        partial void OnFullSizeChanging(Nullable<int> value);
        partial void OnFullSizeChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnItemBarcodeChanging(string value);
        partial void OnItemBarcodeChanged();
        partial void OnItemIDChanging(Nullable<int> value);
        partial void OnItemIDChanged();
        partial void OnItemImageChanging(Nullable<int> value);
        partial void OnItemImageChanged();
        partial void OnItemNameChanging(string value);
        partial void OnItemNameChanged();
        partial void OnLocationIDChanging(Nullable<int> value);
        partial void OnLocationIDChanged();
        partial void OnQtyChanging(Nullable<int> value);
        partial void OnQtyChanged();
        partial void OnScanDateChanging(Nullable<DateTime> value);
        partial void OnScanDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemDetail"/> class.
        /// </summary>
        public ItemDetail()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                if ((this._employeeID != value))
                {
                    this.OnEmployeeIDChanging(value);
                    this.RaiseDataMemberChanging("EmployeeID");
                    this.ValidateProperty("EmployeeID", value);
                    this._employeeID = value;
                    this.RaiseDataMemberChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullSize' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> FullSize
        {
            get
            {
                return this._fullSize;
            }
            set
            {
                if ((this._fullSize != value))
                {
                    this.OnFullSizeChanging(value);
                    this.RaiseDataMemberChanging("FullSize");
                    this.ValidateProperty("FullSize", value);
                    this._fullSize = value;
                    this.RaiseDataMemberChanged("FullSize");
                    this.OnFullSizeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ItemBarcode' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ItemBarcode
        {
            get
            {
                return this._itemBarcode;
            }
            set
            {
                if ((this._itemBarcode != value))
                {
                    this.OnItemBarcodeChanging(value);
                    this.RaiseDataMemberChanging("ItemBarcode");
                    this.ValidateProperty("ItemBarcode", value);
                    this._itemBarcode = value;
                    this.RaiseDataMemberChanged("ItemBarcode");
                    this.OnItemBarcodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ItemID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ItemID
        {
            get
            {
                return this._itemID;
            }
            set
            {
                if ((this._itemID != value))
                {
                    this.OnItemIDChanging(value);
                    this.RaiseDataMemberChanging("ItemID");
                    this.ValidateProperty("ItemID", value);
                    this._itemID = value;
                    this.RaiseDataMemberChanged("ItemID");
                    this.OnItemIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ItemImage' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ItemImage
        {
            get
            {
                return this._itemImage;
            }
            set
            {
                if ((this._itemImage != value))
                {
                    this.OnItemImageChanging(value);
                    this.RaiseDataMemberChanging("ItemImage");
                    this.ValidateProperty("ItemImage", value);
                    this._itemImage = value;
                    this.RaiseDataMemberChanged("ItemImage");
                    this.OnItemImageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ItemName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ItemName
        {
            get
            {
                return this._itemName;
            }
            set
            {
                if ((this._itemName != value))
                {
                    this.OnItemNameChanging(value);
                    this.RaiseDataMemberChanging("ItemName");
                    this.ValidateProperty("ItemName", value);
                    this._itemName = value;
                    this.RaiseDataMemberChanged("ItemName");
                    this.OnItemNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocationID' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> LocationID
        {
            get
            {
                return this._locationID;
            }
            set
            {
                if ((this._locationID != value))
                {
                    this.OnLocationIDChanging(value);
                    this.RaiseDataMemberChanging("LocationID");
                    this.ValidateProperty("LocationID", value);
                    this._locationID = value;
                    this.RaiseDataMemberChanged("LocationID");
                    this.OnLocationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Qty' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Qty
        {
            get
            {
                return this._qty;
            }
            set
            {
                if ((this._qty != value))
                {
                    this.OnQtyChanging(value);
                    this.RaiseDataMemberChanging("Qty");
                    this.ValidateProperty("Qty", value);
                    this._qty = value;
                    this.RaiseDataMemberChanged("Qty");
                    this.OnQtyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ScanDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ScanDate
        {
            get
            {
                return this._scanDate;
            }
            set
            {
                if ((this._scanDate != value))
                {
                    this.OnScanDateChanging(value);
                    this.RaiseDataMemberChanging("ScanDate");
                    this.ValidateProperty("ScanDate", value);
                    this._scanDate = value;
                    this.RaiseDataMemberChanged("ScanDate");
                    this.OnScanDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Location' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/I.M.S.Web")]
    public sealed partial class Location : Entity
    {
        
        private int _locationID;
        
        private string _locationName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnLocationIDChanging(int value);
        partial void OnLocationIDChanged();
        partial void OnLocationNameChanging(string value);
        partial void OnLocationNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Location"/> class.
        /// </summary>
        public Location()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'LocationID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int LocationID
        {
            get
            {
                return this._locationID;
            }
            set
            {
                if ((this._locationID != value))
                {
                    this.OnLocationIDChanging(value);
                    this.ValidateProperty("LocationID", value);
                    this._locationID = value;
                    this.RaisePropertyChanged("LocationID");
                    this.OnLocationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LocationName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string LocationName
        {
            get
            {
                return this._locationName;
            }
            set
            {
                if ((this._locationName != value))
                {
                    this.OnLocationNameChanging(value);
                    this.RaiseDataMemberChanging("LocationName");
                    this.ValidateProperty("LocationName", value);
                    this._locationName = value;
                    this.RaiseDataMemberChanged("LocationName");
                    this.OnLocationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._locationID;
        }
    }
}
