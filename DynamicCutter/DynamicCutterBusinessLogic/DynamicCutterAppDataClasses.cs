#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DynamicCutterBusinessLogic
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DynamicCutterApp")]
	public partial class DynamicCutterAppDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDC_ShiftMaster(DC_ShiftMaster instance);
    partial void UpdateDC_ShiftMaster(DC_ShiftMaster instance);
    partial void DeleteDC_ShiftMaster(DC_ShiftMaster instance);
    partial void InsertDC_LocationMaster(DC_LocationMaster instance);
    partial void UpdateDC_LocationMaster(DC_LocationMaster instance);
    partial void DeleteDC_LocationMaster(DC_LocationMaster instance);
    partial void InsertDC_User(DC_User instance);
    partial void UpdateDC_User(DC_User instance);
    partial void DeleteDC_User(DC_User instance);
    partial void InsertDC_RollMaster(DC_RollMaster instance);
    partial void UpdateDC_RollMaster(DC_RollMaster instance);
    partial void DeleteDC_RollMaster(DC_RollMaster instance);
    partial void InsertDC_RollNumber(DC_RollNumber instance);
    partial void UpdateDC_RollNumber(DC_RollNumber instance);
    partial void DeleteDC_RollNumber(DC_RollNumber instance);
    partial void InsertDC_TransmitLog(DC_TransmitLog instance);
    partial void UpdateDC_TransmitLog(DC_TransmitLog instance);
    partial void DeleteDC_TransmitLog(DC_TransmitLog instance);
    partial void InsertDC_DefectMaster(DC_DefectMaster instance);
    partial void UpdateDC_DefectMaster(DC_DefectMaster instance);
    partial void DeleteDC_DefectMaster(DC_DefectMaster instance);
    partial void InsertDC_ActionMaster(DC_ActionMaster instance);
    partial void UpdateDC_ActionMaster(DC_ActionMaster instance);
    partial void DeleteDC_ActionMaster(DC_ActionMaster instance);
    partial void InsertDC_ProductionLineInfo(DC_ProductionLineInfo instance);
    partial void UpdateDC_ProductionLineInfo(DC_ProductionLineInfo instance);
    partial void DeleteDC_ProductionLineInfo(DC_ProductionLineInfo instance);
    partial void InsertDC_ExamRollLog(DC_ExamRollLog instance);
    partial void UpdateDC_ExamRollLog(DC_ExamRollLog instance);
    partial void DeleteDC_ExamRollLog(DC_ExamRollLog instance);
    partial void InsertDC_CurrentUser(DC_CurrentUser instance);
    partial void UpdateDC_CurrentUser(DC_CurrentUser instance);
    partial void DeleteDC_CurrentUser(DC_CurrentUser instance);
    partial void InsertDC_ErrorLog(DC_ErrorLog instance);
    partial void UpdateDC_ErrorLog(DC_ErrorLog instance);
    partial void DeleteDC_ErrorLog(DC_ErrorLog instance);
    #endregion
		
		public DynamicCutterAppDataClassesDataContext() : 
				base(global::DynamicCutterBusinessLogic.Properties.Settings.Default.DynamicCutterAppConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DynamicCutterAppDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DynamicCutterAppDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DynamicCutterAppDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DynamicCutterAppDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DC_ShiftMaster> DC_ShiftMasters
		{
			get
			{
				return this.GetTable<DC_ShiftMaster>();
			}
		}
		
		public System.Data.Linq.Table<DC_LocationMaster> DC_LocationMasters
		{
			get
			{
				return this.GetTable<DC_LocationMaster>();
			}
		}
		
		public System.Data.Linq.Table<DC_User> DC_Users
		{
			get
			{
				return this.GetTable<DC_User>();
			}
		}
		
		public System.Data.Linq.Table<DC_RollMaster> DC_RollMasters
		{
			get
			{
				return this.GetTable<DC_RollMaster>();
			}
		}
		
		public System.Data.Linq.Table<DC_RollNumber> DC_RollNumbers
		{
			get
			{
				return this.GetTable<DC_RollNumber>();
			}
		}
		
		public System.Data.Linq.Table<DC_TransmitLog> DC_TransmitLogs
		{
			get
			{
				return this.GetTable<DC_TransmitLog>();
			}
		}
		
		public System.Data.Linq.Table<DC_DefectMaster> DC_DefectMasters
		{
			get
			{
				return this.GetTable<DC_DefectMaster>();
			}
		}
		
		public System.Data.Linq.Table<DC_ActionMaster> DC_ActionMasters
		{
			get
			{
				return this.GetTable<DC_ActionMaster>();
			}
		}
		
		public System.Data.Linq.Table<DC_ProductionLineInfo> DC_ProductionLineInfos
		{
			get
			{
				return this.GetTable<DC_ProductionLineInfo>();
			}
		}
		
		public System.Data.Linq.Table<DC_ExamRollLog> DC_ExamRollLogs
		{
			get
			{
				return this.GetTable<DC_ExamRollLog>();
			}
		}
		
		public System.Data.Linq.Table<DC_CurrentUser> DC_CurrentUsers
		{
			get
			{
				return this.GetTable<DC_CurrentUser>();
			}
		}
		
		public System.Data.Linq.Table<DC_ErrorLog> DC_ErrorLogs
		{
			get
			{
				return this.GetTable<DC_ErrorLog>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetRollInfo")]
		public ISingleResult<GetRollInfoResult> GetRollInfo()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetRollInfoResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ChangeRoll")]
		public ISingleResult<ChangeRollResult> ChangeRoll([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> current_roll_id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> next_roll_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), current_roll_id, next_roll_id);
			return ((ISingleResult<ChangeRollResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetUserMasterData")]
		public ISingleResult<GetUserMasterDataResult> GetUserMasterData([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> user_id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string ip)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user_id, ip);
			return ((ISingleResult<GetUserMasterDataResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AbortRoll")]
		public int AbortRoll([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> roll_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roll_id);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteExamRollLog")]
		public int DeleteExamRollLog([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> log_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), log_id);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.TransferRollLogs")]
		public int TransferRollLogs([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> roll_id, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> is_transmitted)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roll_id, is_transmitted);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DC_ShiftMaster")]
	public partial class DC_ShiftMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShiftId;
		
		private System.Nullable<int> _LocationID;
		
		private string _ShiftDescription;
		
		private System.Nullable<bool> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShiftIdChanging(int value);
    partial void OnShiftIdChanged();
    partial void OnLocationIDChanging(System.Nullable<int> value);
    partial void OnLocationIDChanged();
    partial void OnShiftDescriptionChanging(string value);
    partial void OnShiftDescriptionChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public DC_ShiftMaster()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShiftId
		{
			get
			{
				return this._ShiftId;
			}
			set
			{
				if ((this._ShiftId != value))
				{
					this.OnShiftIdChanging(value);
					this.SendPropertyChanging();
					this._ShiftId = value;
					this.SendPropertyChanged("ShiftId");
					this.OnShiftIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int")]
		public System.Nullable<int> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftDescription", DbType="NVarChar(100)")]
		public string ShiftDescription
		{
			get
			{
				return this._ShiftDescription;
			}
			set
			{
				if ((this._ShiftDescription != value))
				{
					this.OnShiftDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShiftDescription = value;
					this.SendPropertyChanged("ShiftDescription");
					this.OnShiftDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DC_LocationMaster")]
	public partial class DC_LocationMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationId;
		
		private string _Location;
		
		private System.Nullable<bool> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(int value);
    partial void OnLocationIdChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public DC_LocationMaster()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(100)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DC_Users")]
	public partial class DC_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _LoginId;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private System.Nullable<int> _DepartmentId;
		
		private System.Nullable<int> _RoleId;
		
		private System.Nullable<int> _LocationId;
		
		private System.Nullable<int> _ShiftId;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<System.DateTime> _LastLoginDate;
		
		private System.Nullable<bool> _Status;
		
		private string _ClockNo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnLoginIdChanging(string value);
    partial void OnLoginIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDepartmentIdChanging(System.Nullable<int> value);
    partial void OnDepartmentIdChanged();
    partial void OnRoleIdChanging(System.Nullable<int> value);
    partial void OnRoleIdChanged();
    partial void OnLocationIdChanging(System.Nullable<int> value);
    partial void OnLocationIdChanged();
    partial void OnShiftIdChanging(System.Nullable<int> value);
    partial void OnShiftIdChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnLastLoginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginDateChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnClockNoChanging(string value);
    partial void OnClockNoChanged();
    #endregion
		
		public DC_User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginId", DbType="NVarChar(200)")]
		public string LoginId
		{
			get
			{
				return this._LoginId;
			}
			set
			{
				if ((this._LoginId != value))
				{
					this.OnLoginIdChanging(value);
					this.SendPropertyChanging();
					this._LoginId = value;
					this.SendPropertyChanged("LoginId");
					this.OnLoginIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(100)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(100)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(100)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int")]
		public System.Nullable<int> DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int")]
		public System.Nullable<int> RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int")]
		public System.Nullable<int> LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShiftId", DbType="Int")]
		public System.Nullable<int> ShiftId
		{
			get
			{
				return this._ShiftId;
			}
			set
			{
				if ((this._ShiftId != value))
				{
					this.OnShiftIdChanging(value);
					this.SendPropertyChanging();
					this._ShiftId = value;
					this.SendPropertyChanged("ShiftId");
					this.OnShiftIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClockNo", DbType="NVarChar(20)")]
		public string ClockNo
		{
			get
			{
				return this._ClockNo;
			}
			set
			{
				if ((this._ClockNo != value))
				{
					this.OnClockNoChanging(value);
					this.SendPropertyChanging();
					this._ClockNo = value;
					this.SendPropertyChanged("ClockNo");
					this.OnClockNoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DC_RollMaster")]
	public partial class DC_RollMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RollID;
		
		private string _RollNumber;
		
		private System.Nullable<bool> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRollIDChanging(int value);
    partial void OnRollIDChanged();
    partial void OnRollNumberChanging(string value);
    partial void OnRollNumberChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public DC_RollMaster()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RollID
		{
			get
			{
				return this._RollID;
			}
			set
			{
				if ((this._RollID != value))
				{
					this.OnRollIDChanging(value);
					this.SendPropertyChanging();
					this._RollID = value;
					this.SendPropertyChanged("RollID");
					this.OnRollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollNumber", DbType="NVarChar(50)")]
		public string RollNumber
		{
			get
			{
				return this._RollNumber;
			}
			set
			{
				if ((this._RollNumber != value))
				{
					this.OnRollNumberChanging(value);
					this.SendPropertyChanging();
					this._RollNumber = value;
					this.SendPropertyChanged("RollNumber");
					this.OnRollNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DC_RollNumbers")]
	public partial class DC_RollNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RollNumberID;
		
		private int _RollID;
		
		private System.DateTime _ScheduleTime;
		
		private string _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRollNumberIDChanging(int value);
    partial void OnRollNumberIDChanged();
    partial void OnRollIDChanging(int value);
    partial void OnRollIDChanged();
    partial void OnScheduleTimeChanging(System.DateTime value);
    partial void OnScheduleTimeChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public DC_RollNumber()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollNumberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RollNumberID
		{
			get
			{
				return this._RollNumberID;
			}
			set
			{
				if ((this._RollNumberID != value))
				{
					this.OnRollNumberIDChanging(value);
					this.SendPropertyChanging();
					this._RollNumberID = value;
					this.SendPropertyChanged("RollNumberID");
					this.OnRollNumberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollID", DbType="Int NOT NULL")]
		public int RollID
		{
			get
			{
				return this._RollID;
			}
			set
			{
				if ((this._RollID != value))
				{
					this.OnRollIDChanging(value);
					this.SendPropertyChanging();
					this._RollID = value;
					this.SendPropertyChanged("RollID");
					this.OnRollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleTime", DbType="DateTime NOT NULL")]
		public System.DateTime ScheduleTime
		{
			get
			{
				return this._ScheduleTime;
			}
			set
			{
				if ((this._ScheduleTime != value))
				{
					this.OnScheduleTimeChanging(value);
					this.SendPropertyChanging();
					this._ScheduleTime = value;
					this.SendPropertyChanged("ScheduleTime");
					this.OnScheduleTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DC_TransmitLog")]
	public partial class DC_TransmitLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _LogID;
		
		private int _RollID;
		
		private System.Nullable<System.DateTime> _LogTime;
		
		private string _RxTxFlag;
		
		private string _LogMessage;
		
		private System.Nullable<char> _Side;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(long value);
    partial void OnLogIDChanged();
    partial void OnRollIDChanging(int value);
    partial void OnRollIDChanged();
    partial void OnLogTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLogTimeChanged();
    partial void OnRxTxFlagChanging(string value);
    partial void OnRxTxFlagChanged();
    partial void OnLogMessageChanging(string value);
    partial void OnLogMessageChanged();
    partial void OnSideChanging(System.Nullable<char> value);
    partial void OnSideChanged();
    #endregion
		
		public DC_TransmitLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollID", DbType="Int NOT NULL")]
		public int RollID
		{
			get
			{
				return this._RollID;
			}
			set
			{
				if ((this._RollID != value))
				{
					this.OnRollIDChanging(value);
					this.SendPropertyChanging();
					this._RollID = value;
					this.SendPropertyChanged("RollID");
					this.OnRollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LogTime
		{
			get
			{
				return this._LogTime;
			}
			set
			{
				if ((this._LogTime != value))
				{
					this.OnLogTimeChanging(value);
					this.SendPropertyChanging();
					this._LogTime = value;
					this.SendPropertyChanged("LogTime");
					this.OnLogTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RxTxFlag", DbType="VarChar(3)")]
		public string RxTxFlag
		{
			get
			{
				return this._RxTxFlag;
			}
			set
			{
				if ((this._RxTxFlag != value))
				{
					this.OnRxTxFlagChanging(value);
					this.SendPropertyChanging();
					this._RxTxFlag = value;
					this.SendPropertyChanged("RxTxFlag");
					this.OnRxTxFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogMessage", DbType="VarChar(100)")]
		public string LogMessage
		{
			get
			{
				return this._LogMessage;
			}
			set
			{
				if ((this._LogMessage != value))
				{
					this.OnLogMessageChanging(value);
					this.SendPropertyChanging();
					this._LogMessage = value;
					this.SendPropertyChanged("LogMessage");
					this.OnLogMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Side", DbType="Char(1)")]
		public System.Nullable<char> Side
		{
			get
			{
				return this._Side;
			}
			set
			{
				if ((this._Side != value))
				{
					this.OnSideChanging(value);
					this.SendPropertyChanging();
					this._Side = value;
					this.SendPropertyChanged("Side");
					this.OnSideChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DC_DefectMaster")]
	public partial class DC_DefectMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DefectID;
		
		private string _DefectCode;
		
		private string _DefectDesc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDefectIDChanging(int value);
    partial void OnDefectIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnDefectDescChanging(string value);
    partial void OnDefectDescChanged();
    #endregion
		
		public DC_DefectMaster()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DefectID
		{
			get
			{
				return this._DefectID;
			}
			set
			{
				if ((this._DefectID != value))
				{
					this.OnDefectIDChanging(value);
					this.SendPropertyChanging();
					this._DefectID = value;
					this.SendPropertyChanged("DefectID");
					this.OnDefectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefectCode", DbType="NVarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefectDesc", DbType="NVarChar(100)")]
		public string DefectDesc
		{
			get
			{
				return this._DefectDesc;
			}
			set
			{
				if ((this._DefectDesc != value))
				{
					this.OnDefectDescChanging(value);
					this.SendPropertyChanging();
					this._DefectDesc = value;
					this.SendPropertyChanged("DefectDesc");
					this.OnDefectDescChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DC_ActionMaster")]
	public partial class DC_ActionMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActionID;
		
		private string _ActionDesc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActionIDChanging(int value);
    partial void OnActionIDChanged();
    partial void OnActionDescChanging(string value);
    partial void OnActionDescChanged();
    #endregion
		
		public DC_ActionMaster()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionDesc", DbType="NVarChar(50)")]
		public string ActionDesc
		{
			get
			{
				return this._ActionDesc;
			}
			set
			{
				if ((this._ActionDesc != value))
				{
					this.OnActionDescChanging(value);
					this.SendPropertyChanging();
					this._ActionDesc = value;
					this.SendPropertyChanged("ActionDesc");
					this.OnActionDescChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DC_ProductionLineInfo")]
	public partial class DC_ProductionLineInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductionId;
		
		private System.Nullable<int> _LocationId;
		
		private System.Nullable<int> _DepartmentID;
		
		private string _Width;
		
		private string _Line;
		
		private string _EastIP;
		
		private string _WestIP;
		
		private System.Nullable<bool> _Status;
		
		private string _SQLUserID;
		
		private string _SQLPassword;
		
		private string _Prefix;
		
		private string _MasterSide;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductionIdChanging(int value);
    partial void OnProductionIdChanged();
    partial void OnLocationIdChanging(System.Nullable<int> value);
    partial void OnLocationIdChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    partial void OnWidthChanging(string value);
    partial void OnWidthChanged();
    partial void OnLineChanging(string value);
    partial void OnLineChanged();
    partial void OnEastIPChanging(string value);
    partial void OnEastIPChanged();
    partial void OnWestIPChanging(string value);
    partial void OnWestIPChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnSQLUserIDChanging(string value);
    partial void OnSQLUserIDChanged();
    partial void OnSQLPasswordChanging(string value);
    partial void OnSQLPasswordChanged();
    partial void OnPrefixChanging(string value);
    partial void OnPrefixChanged();
    partial void OnMasterSideChanging(string value);
    partial void OnMasterSideChanged();
    #endregion
		
		public DC_ProductionLineInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductionId
		{
			get
			{
				return this._ProductionId;
			}
			set
			{
				if ((this._ProductionId != value))
				{
					this.OnProductionIdChanging(value);
					this.SendPropertyChanging();
					this._ProductionId = value;
					this.SendPropertyChanged("ProductionId");
					this.OnProductionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int")]
		public System.Nullable<int> LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="NVarChar(20)")]
		public string Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line", DbType="NVarChar(20)")]
		public string Line
		{
			get
			{
				return this._Line;
			}
			set
			{
				if ((this._Line != value))
				{
					this.OnLineChanging(value);
					this.SendPropertyChanging();
					this._Line = value;
					this.SendPropertyChanged("Line");
					this.OnLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EastIP", DbType="NVarChar(50)")]
		public string EastIP
		{
			get
			{
				return this._EastIP;
			}
			set
			{
				if ((this._EastIP != value))
				{
					this.OnEastIPChanging(value);
					this.SendPropertyChanging();
					this._EastIP = value;
					this.SendPropertyChanged("EastIP");
					this.OnEastIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WestIP", DbType="NVarChar(50)")]
		public string WestIP
		{
			get
			{
				return this._WestIP;
			}
			set
			{
				if ((this._WestIP != value))
				{
					this.OnWestIPChanging(value);
					this.SendPropertyChanging();
					this._WestIP = value;
					this.SendPropertyChanged("WestIP");
					this.OnWestIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SQLUserID", DbType="NVarChar(50)")]
		public string SQLUserID
		{
			get
			{
				return this._SQLUserID;
			}
			set
			{
				if ((this._SQLUserID != value))
				{
					this.OnSQLUserIDChanging(value);
					this.SendPropertyChanging();
					this._SQLUserID = value;
					this.SendPropertyChanged("SQLUserID");
					this.OnSQLUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SQLPassword", DbType="NVarChar(50)")]
		public string SQLPassword
		{
			get
			{
				return this._SQLPassword;
			}
			set
			{
				if ((this._SQLPassword != value))
				{
					this.OnSQLPasswordChanging(value);
					this.SendPropertyChanging();
					this._SQLPassword = value;
					this.SendPropertyChanged("SQLPassword");
					this.OnSQLPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prefix", DbType="NVarChar(5)")]
		public string Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this.OnPrefixChanging(value);
					this.SendPropertyChanging();
					this._Prefix = value;
					this.SendPropertyChanged("Prefix");
					this.OnPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterSide", DbType="NVarChar(5)")]
		public string MasterSide
		{
			get
			{
				return this._MasterSide;
			}
			set
			{
				if ((this._MasterSide != value))
				{
					this.OnMasterSideChanging(value);
					this.SendPropertyChanging();
					this._MasterSide = value;
					this.SendPropertyChanged("MasterSide");
					this.OnMasterSideChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DC_ExamRollLog")]
	public partial class DC_ExamRollLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogID;
		
		private int _RollID;
		
		private string _LMR;
		
		private System.Nullable<int> _Grade;
		
		private System.Nullable<int> _Spot;
		
		private string _DefectCode;
		
		private string _Side;
		
		private System.Nullable<int> _Shade;
		
		private System.Nullable<int> _ActionID;
		
		private string _Type;
		
		private System.Nullable<bool> _Transmitted;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(int value);
    partial void OnLogIDChanged();
    partial void OnRollIDChanging(int value);
    partial void OnRollIDChanged();
    partial void OnLMRChanging(string value);
    partial void OnLMRChanged();
    partial void OnGradeChanging(System.Nullable<int> value);
    partial void OnGradeChanged();
    partial void OnSpotChanging(System.Nullable<int> value);
    partial void OnSpotChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnSideChanging(string value);
    partial void OnSideChanged();
    partial void OnShadeChanging(System.Nullable<int> value);
    partial void OnShadeChanged();
    partial void OnActionIDChanging(System.Nullable<int> value);
    partial void OnActionIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTransmittedChanging(System.Nullable<bool> value);
    partial void OnTransmittedChanged();
    #endregion
		
		public DC_ExamRollLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollID", DbType="Int NOT NULL")]
		public int RollID
		{
			get
			{
				return this._RollID;
			}
			set
			{
				if ((this._RollID != value))
				{
					this.OnRollIDChanging(value);
					this.SendPropertyChanging();
					this._RollID = value;
					this.SendPropertyChanged("RollID");
					this.OnRollIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LMR", DbType="NVarChar(50)")]
		public string LMR
		{
			get
			{
				return this._LMR;
			}
			set
			{
				if ((this._LMR != value))
				{
					this.OnLMRChanging(value);
					this.SendPropertyChanging();
					this._LMR = value;
					this.SendPropertyChanged("LMR");
					this.OnLMRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grade", DbType="Int")]
		public System.Nullable<int> Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Spot", DbType="Int")]
		public System.Nullable<int> Spot
		{
			get
			{
				return this._Spot;
			}
			set
			{
				if ((this._Spot != value))
				{
					this.OnSpotChanging(value);
					this.SendPropertyChanging();
					this._Spot = value;
					this.SendPropertyChanged("Spot");
					this.OnSpotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefectCode", DbType="NVarChar(50)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Side", DbType="NVarChar(10)")]
		public string Side
		{
			get
			{
				return this._Side;
			}
			set
			{
				if ((this._Side != value))
				{
					this.OnSideChanging(value);
					this.SendPropertyChanging();
					this._Side = value;
					this.SendPropertyChanged("Side");
					this.OnSideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shade", DbType="Int")]
		public System.Nullable<int> Shade
		{
			get
			{
				return this._Shade;
			}
			set
			{
				if ((this._Shade != value))
				{
					this.OnShadeChanging(value);
					this.SendPropertyChanging();
					this._Shade = value;
					this.SendPropertyChanged("Shade");
					this.OnShadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionID", DbType="Int")]
		public System.Nullable<int> ActionID
		{
			get
			{
				return this._ActionID;
			}
			set
			{
				if ((this._ActionID != value))
				{
					this.OnActionIDChanging(value);
					this.SendPropertyChanging();
					this._ActionID = value;
					this.SendPropertyChanged("ActionID");
					this.OnActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transmitted", DbType="Bit")]
		public System.Nullable<bool> Transmitted
		{
			get
			{
				return this._Transmitted;
			}
			set
			{
				if ((this._Transmitted != value))
				{
					this.OnTransmittedChanging(value);
					this.SendPropertyChanging();
					this._Transmitted = value;
					this.SendPropertyChanged("Transmitted");
					this.OnTransmittedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DC_CurrentUsers")]
	public partial class DC_CurrentUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Side;
		
		private System.Nullable<int> _UserID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSideChanging(string value);
    partial void OnSideChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public DC_CurrentUser()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Side", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Side
		{
			get
			{
				return this._Side;
			}
			set
			{
				if ((this._Side != value))
				{
					this.OnSideChanging(value);
					this.SendPropertyChanging();
					this._Side = value;
					this.SendPropertyChanged("Side");
					this.OnSideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DC_ErrorLogs")]
	public partial class DC_ErrorLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ErrorID;
		
		private string _ErrorMessage;
		
		private string _StackTrace;
		
		private System.Nullable<System.DateTime> _ErrorTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorIDChanging(int value);
    partial void OnErrorIDChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    partial void OnStackTraceChanging(string value);
    partial void OnStackTraceChanged();
    partial void OnErrorTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnErrorTimeChanged();
    #endregion
		
		public DC_ErrorLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ErrorID
		{
			get
			{
				return this._ErrorID;
			}
			set
			{
				if ((this._ErrorID != value))
				{
					this.OnErrorIDChanging(value);
					this.SendPropertyChanging();
					this._ErrorID = value;
					this.SendPropertyChanged("ErrorID");
					this.OnErrorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessage", DbType="NVarChar(MAX)")]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StackTrace", DbType="NVarChar(MAX)")]
		public string StackTrace
		{
			get
			{
				return this._StackTrace;
			}
			set
			{
				if ((this._StackTrace != value))
				{
					this.OnStackTraceChanging(value);
					this.SendPropertyChanging();
					this._StackTrace = value;
					this.SendPropertyChanged("StackTrace");
					this.OnStackTraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ErrorTime
		{
			get
			{
				return this._ErrorTime;
			}
			set
			{
				if ((this._ErrorTime != value))
				{
					this.OnErrorTimeChanging(value);
					this.SendPropertyChanging();
					this._ErrorTime = value;
					this.SendPropertyChanged("ErrorTime");
					this.OnErrorTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetRollInfoResult
	{
		
		private string _CurrentRoll;
		
		private string _NextRoll;
		
		private System.Nullable<int> _CurrentRollID;
		
		private System.Nullable<int> _NextRollID;
		
		public GetRollInfoResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentRoll", DbType="NVarChar(50)")]
		public string CurrentRoll
		{
			get
			{
				return this._CurrentRoll;
			}
			set
			{
				if ((this._CurrentRoll != value))
				{
					this._CurrentRoll = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextRoll", DbType="NVarChar(50)")]
		public string NextRoll
		{
			get
			{
				return this._NextRoll;
			}
			set
			{
				if ((this._NextRoll != value))
				{
					this._NextRoll = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentRollID", DbType="Int")]
		public System.Nullable<int> CurrentRollID
		{
			get
			{
				return this._CurrentRollID;
			}
			set
			{
				if ((this._CurrentRollID != value))
				{
					this._CurrentRollID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextRollID", DbType="Int")]
		public System.Nullable<int> NextRollID
		{
			get
			{
				return this._NextRollID;
			}
			set
			{
				if ((this._NextRollID != value))
				{
					this._NextRollID = value;
				}
			}
		}
	}
	
	public partial class ChangeRollResult
	{
		
		private string _NextRoll;
		
		private int _NextRollID;
		
		public ChangeRollResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextRoll", DbType="NVarChar(50)")]
		public string NextRoll
		{
			get
			{
				return this._NextRoll;
			}
			set
			{
				if ((this._NextRoll != value))
				{
					this._NextRoll = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextRollID", DbType="Int NOT NULL")]
		public int NextRollID
		{
			get
			{
				return this._NextRollID;
			}
			set
			{
				if ((this._NextRollID != value))
				{
					this._NextRollID = value;
				}
			}
		}
	}
	
	public partial class GetUserMasterDataResult
	{
		
		private string _Location;
		
		private string _Line;
		
		private string _Shift;
		
		private string _Side;
		
		private string _Prefix;
		
		private string _MasterSide;
		
		public GetUserMasterDataResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(100)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this._Location = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line", DbType="NVarChar(20)")]
		public string Line
		{
			get
			{
				return this._Line;
			}
			set
			{
				if ((this._Line != value))
				{
					this._Line = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shift", DbType="NVarChar(100)")]
		public string Shift
		{
			get
			{
				return this._Shift;
			}
			set
			{
				if ((this._Shift != value))
				{
					this._Shift = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Side", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string Side
		{
			get
			{
				return this._Side;
			}
			set
			{
				if ((this._Side != value))
				{
					this._Side = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prefix", DbType="NVarChar(5)")]
		public string Prefix
		{
			get
			{
				return this._Prefix;
			}
			set
			{
				if ((this._Prefix != value))
				{
					this._Prefix = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterSide", DbType="NVarChar(5)")]
		public string MasterSide
		{
			get
			{
				return this._MasterSide;
			}
			set
			{
				if ((this._MasterSide != value))
				{
					this._MasterSide = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
